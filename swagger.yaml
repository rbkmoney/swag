swagger: '2.0'
info:
  version: 1.0.0
  title: RBK Money Common API
  description: "An API that implements System's entry point"
  termsOfService: 'http://rbkmoney.com/'
  contact:
    name: Anton Kuranda
    email: a.kuranda@rbkmoney.com
    url: 'https://api.rbkmoney.com'
host: api.rbkmoney.com
basePath: /v1
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  bearer:
    type: apiKey
    name: Authorization
    in: header
    description: JWT token
security:
  - bearer: []
responses:
  NotFound:
    description: Entity not found
    schema:
      $ref: '#/definitions/GeneralError'
  BadRequest:
    description: Illegal input for operation.
    schema:
      $ref: '#/definitions/LogicError'
parameters:
  requestID:
    name: X-Request-ID
    in: header
    description: Unique request identifier
    required: true
    type: string
  claimID:
    name: claimID
    in: path
    description: Claim ID
    required: true
    type: string
  shopID:
    name: shopID
    in: path
    description: Shop ID
    required: true
    type: integer
    format: int32
  invoiceID:
    name: invoiceID
    in: path
    description: Invoice ID
    required: true
    type: string
  contractID:
    name: contractID
    in: path
    description: Contract ID
    required: true
    type: integer
    format: int32
  fromTime:
    name: fromTime
    in: query
    description: Selection starting time
    required: true
    type: string
    format: date-time
  toTime:
    name: toTime
    in: query
    description: Selection ending time
    required: true
    type: string
    format: date-time
  splitUnit:
    name: splitUnit
    in: query
    description: Split unit
    required: true
    type: string
    enum:
      - minute
      - hour
      - day
      - week
      - month
      - year
  splitSize:
    name: splitSize
    in: query
    description: Split interval size
    required: true
    type: integer
    format: int32
    minimum: 1
  limit:
    name: limit
    in: query
    description: Selection limit
    required: false
    type: integer
    format: int32
    minimum: 1
  offset:
    name: offset
    in: query
    description: Selection offset (inclusive)
    required: false
    type: integer
    minimum: 0
paths:
  '/processing/me':
    get:
      description: Get my party
      operationId: getMyParty
      tags:
      - Parties
      parameters:
      - $ref: '#/parameters/requestID'
      responses:
        '200':
          description: My party
          schema:
            $ref: '#/definitions/Party'
  '/processing/me/suspend':
    put:
      description: Suspend my party
      operationId: suspendMyParty
      tags:
      - Parties
      parameters:
      - $ref: '#/parameters/requestID'
      responses:
        '202':
          description: Claim registered
          schema:
            $ref: '#/definitions/ClaimRegistrationResult'
  '/processing/me/activate':
    put:
      description: Activate my party
      operationId: activateMyParty
      tags:
      - Parties
      parameters:
      - $ref: '#/parameters/requestID'
      responses:
        '202':
          description: Claim registered
          schema:
            $ref: '#/definitions/ClaimRegistrationResult'
  '/processing/claims/':
    get:
      description: Get claims by status
      operationId: getClaimsByStatus
      tags:
      - Claims
      parameters:
      - $ref: '#/parameters/requestID'
      - name: claimStatus
        in: query
        type: string
        enum:
        - pending
        required: true
      responses:
        '200':
          description: Claims found
          schema:
            type: array
            items:
              $ref: '#/definitions/Claim'
        '400':
          $ref: '#/responses/BadRequest'
  '/processing/claims/{claimID}':
    get:
      description: Get claim by ID
      operationId: getClaimByID
      tags:
      - Claims
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/claimID'
      responses:
        '200':
          description: Claim found
          schema:
            $ref: '#/definitions/Claim'
        '404':
          $ref: '#/responses/NotFound'
  '/processing/claims/{claimID}/revoke':
    put:
      description: Revoke claim by ID
      operationId: revokeClaimByID
      tags:
      - Claims
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/claimID'
      - name: revokeClaim
        in: body
        description: Revoke claim params
        required: true
        schema:
          $ref: '#/definitions/Reason'
      responses:
        '200':
          description: Claim revoked
        '404':
          $ref: '#/responses/NotFound'
        '400':
          $ref: '#/responses/BadRequest'
  '/processing/shops':
    get:
      description: Get all shops
      operationId: getShops
      tags:
      - Shops
      parameters:
      - $ref: '#/parameters/requestID'
      responses:
        '200':
          description: List of shops
          schema:
            type: array
            items:
              $ref: '#/definitions/Shop'
    post:
      description: Claim for creating a shop
      operationId: createShop
      tags:
      - Shops
      parameters:
      - $ref: '#/parameters/requestID'
      - name: createShopArgs
        in: body
        description: New shop params
        required: true
        schema:
          $ref: '#/definitions/CreateShopArgs'
      responses:
        '202':
          description: Claim registered
          schema:
            $ref: '#/definitions/ClaimRegistrationResult'
        '404':
          $ref: '#/responses/NotFound'
  '/processing/shops/{shopID}':
    get:
      description: Get shop by id
      operationId: getShopByID
      tags:
      - Shops
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/shopID'
      responses:
        '200':
          description: Shop found
          schema:
            $ref: '#/definitions/Shop'
        '404':
          $ref: '#/responses/NotFound'
    post:
      description: Claim for updating the shop
      operationId: updateShop
      tags:
      - Shops
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/shopID'
      - name: updateShopArgs
        in: body
        description: Shop params for an update
        required: true
        schema:
          $ref: '#/definitions/UpdateShopArgs'
      responses:
        '202':
          description: Claim registered
          schema:
            $ref: '#/definitions/ClaimRegistrationResult'
        '404':
          $ref: '#/responses/NotFound'
        '400':
          $ref: '#/responses/BadRequest'
  '/processing/shops/{shopID}/suspend':
    put:
      description: Suspend shop
      operationId: suspendShop
      tags:
      - Shops
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/shopID'
      responses:
        '202':
          description: Claim registered
          schema:
            $ref: '#/definitions/ClaimRegistrationResult'
        '404':
          $ref: '#/responses/NotFound'
  '/processing/shops/{shopID}/activate':
    put:
      description: Activate shop
      operationId: activateShop
      tags:
      - Shops
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/shopID'
      responses:
        '202':
          description: Claim registered
          schema:
            $ref: '#/definitions/ClaimRegistrationResult'
        '404':
          $ref: '#/responses/NotFound'
  '/processing/accounts/{accountID}':
    get:
      description: Get account by ID
      operationId: getAccountByID
      tags:
      - Accounts
      parameters:
      - $ref: '#/parameters/requestID'
      - name: accountID
        in: path
        description: Account ID
        required: true
        type: string
      responses:
        '200':
          description: Account found
          schema:
            $ref: '#/definitions/Account'
        '404':
          $ref: '#/responses/NotFound'
  '/processing/invoices':
    post:
      description: Create new invoice
      tags:
      - Invoices
      operationId: createInvoice
      parameters:
      - $ref: '#/parameters/requestID'
      - name: createInvoiceArgs
        description: New invoice params
        in: body
        required: true
        schema:
          $ref: '#/definitions/CreateInvoiceArgs'
      responses:
        '201':
          description: Invoice created
          schema:
            $ref: '#/definitions/Invoice'
        '400':
          $ref: '#/responses/BadRequest'
  '/processing/invoices/{invoiceID}':
    get:
      description: Returns invoice information by ID
      tags:
      - Invoices
      operationId: getInvoiceByID
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/invoiceID'
      responses:
        '200':
          description: Invoice object
          schema:
            $ref: '#/definitions/Invoice'
        '404':
          $ref: '#/responses/NotFound'
        '400':
          $ref: '#/responses/BadRequest'
  '/processing/invoices/{invoiceID}/fulfill':
    post:
      description: Fulfill invoice
      tags:
        - Invoices
      operationId: fulfillInvoice
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/invoiceID'
      - name: fulfillInvoice
        in: body
        description: Fulfill invoice params
        required: true
        schema:
          $ref: '#/definitions/Reason'
      responses:
        '204':
          description: Invoice fulfilled
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          $ref: '#/responses/NotFound'
  '/processing/invoices/{invoiceID}/rescind':
    post:
      description: Rescind invoice
      tags:
        - Invoices
      operationId: rescindInvoice
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/invoiceID'
      - name: rescindInvoice
        in: body
        description: Rescind invoice params
        required: true
        schema:
          $ref: '#/definitions/Reason'
      responses:
        '200':
          description: Invoice rescinded
        '400':
          $ref: '#/responses/BadRequest'
        '404':
          $ref: '#/responses/NotFound'
  '/processing/invoices/{invoiceID}/events':
    get:
      description: Returns invoice events
      tags:
      - Invoices
      operationId: getInvoiceEvents
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/invoiceID'
      - name: limit
        in: query
        description: Events limit
        required: true
        type: integer
        format: int32
        minimum: 1
      - name: eventID
        in: query
        description: Last seen event id
        required: false
        type: string
      responses:
        '200':
          description: List of invoice events
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        '404':
          $ref: '#/responses/NotFound'
        '400':
          $ref: '#/responses/BadRequest'
  '/processing/invoices/{invoiceID}/payments':
    post:
      description: Start new payment
      tags:
      - Payments
      operationId: createPayment
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/invoiceID'
      - name: createPaymentArgs
        description: Invoice initiation request
        in: body
        required: true
        schema:
          $ref: '#/definitions/CreatePaymentArgs'
      responses:
        '201':
          description: Payment created
          schema:
            $ref: '#/definitions/Payment'
        '404':
          $ref: '#/responses/NotFound'
        '400':
          $ref: '#/responses/BadRequest'
  '/processing/invoices/{invoiceID}/payments/{paymentID}':
    get:
      description: Get payment info
      tags:
      - Payments
      operationId: getPaymentByID
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/invoiceID'
      - name: paymentID
        in: path
        description: Payment ID
        required: true
        type: string
      responses:
        '200':
          description: Payment object
          schema:
            $ref: '#/definitions/Payment'
        '404':
          $ref: '#/responses/NotFound'
        '400':
          $ref: '#/responses/BadRequest'
  '/processing/payment_tools':
    post:
      description: Create new card data token
      tags:
      - Tokens
      operationId: createPaymentToolToken
      parameters:
      - $ref: '#/parameters/requestID'
      - name: paymentTool
        description: Payment tool args
        in: body
        required: true
        schema:
          $ref: '#/definitions/CreatePaymentToolTokenArgs'
      responses:
        '201':
          description: Token created
          schema:
            type: object
            required:
            - token
            - session
            properties:
              token:
                type: string
              session:
                type: string
        '400':
          $ref: '#/responses/BadRequest'
  '/processing/categories/':
    get:
      description: Get categories list
      tags:
      - Categories
      operationId: getCategories
      parameters:
      - $ref: '#/parameters/requestID'
      responses:
        '200':
          description: List of categories
          schema:
            type: array
            items:
                $ref: '#/definitions/Category'
  '/processing/categories/{categoryID}':
    get:
      description: Get category by reference
      tags:
      - Categories
      operationId: getCategoryByRef
      parameters:
      - $ref: '#/parameters/requestID'
      - name: categoryID
        in: path
        description: Category reference
        required: true
        type: integer
        format: int32
      responses:
        '200':
          description: Category found
          schema:
            $ref: '#/definitions/Category'
        '404':
          $ref: '#/responses/NotFound'
        '400':
          $ref: '#/responses/BadRequest'
  '/processing/contracts':
    get:
      description: Get all contracts
      operationId: getContracts
      tags:
      - Contracts
      parameters:
      - $ref: '#/parameters/requestID'
      responses:
        '200':
          description: List of contracts
          schema:
            type: array
            items:
              $ref: '#/definitions/Contract'
    post:
      description: Create new contract
      tags:
      - Contracts
      operationId: createContract
      parameters:
      - $ref: '#/parameters/requestID'
      - name: contractParams
        description: New contract params
        in: body
        required: true
        schema:
          $ref: '#/definitions/ContractParams'
      responses:
        '202':
          description: Claim registered
          schema:
            $ref: '#/definitions/ClaimRegistrationResult'
        '400':
          $ref: '#/responses/BadRequest'
  '/processing/contracts/{contractID}':
    get:
      description: Get contract by ID
      operationId: getContractByID
      tags:
      - Contracts
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/contractID'
      responses:
        '200':
          description: Contract found
          schema:
            $ref: '#/definitions/Contract'
        '404':
          $ref: '#/responses/NotFound'
  '/processing/contracts/{contractID}/payout_tools':
    get:
      description: Get all payout tools
      operationId: getPayoutTools
      tags:
      - PayoutTools
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/contractID'
      responses:
        '200':
          description: List of payout tools
          schema:
            type: array
            items:
              $ref: '#/definitions/PayoutTool'
        '404':
          $ref: '#/responses/NotFound'
    post:
      description: Create new payout tool
      tags:
      - PayoutTools
      operationId: createPayoutTool
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/contractID'
      - name: PayoutToolParams
        description: New payout tool params
        in: body
        required: true
        schema:
          $ref: '#/definitions/PayoutToolParams'
      responses:
        '202':
          description: Claim registered
          schema:
            $ref: '#/definitions/ClaimRegistrationResult'
        '404':
          $ref: '#/responses/NotFound'
        '400':
          $ref: '#/responses/BadRequest'
  '/reference/geo/location/names':
    get:
      description: Get locations names
      operationId: getLocationsNames
      tags:
      - Geo
      parameters:
      - $ref: '#/parameters/requestID'
      - name: language
        in: query
        description: Location language
        required: true
        type: string
      - name: geoID
        in: query
        description: GeoID
        required: true
        type: array
        items:
          type: integer
          format: int32
      responses:
        '200':
          description: Locations Names
          schema:
            type: array
            items:
              $ref: '#/definitions/LocationName'
        '400':
          $ref: '#/responses/BadRequest'
  '/analytics/shops/{shopID}/invoices':
    get:
      description: Search invoices
      tags:
      - Analytics
      operationId: getInvoices
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/shopID'
      - $ref: '#/parameters/fromTime'
      - $ref: '#/parameters/toTime'
      - $ref: '#/parameters/limit'
      - $ref: '#/parameters/offset'
      - name: status
        in: query
        description: Invoices statuses (disjunction)
        required: false
        type: array
        items:
          type: string
          enum:
          - unpaid
          - cancelled
          - paid
          - refunded
          - fulfilled
      - name: invoiceID
        in: query
        description: Invoice ID
        required: false
        type: string
      responses:
        '200':
          description: List of invoices
          schema:
            type: object
            properties:
              totalCount:
                type: integer
              invoices:
                type: array
                items:
                    $ref: '#/definitions/Invoice'
        '404':
          $ref: '#/responses/NotFound'
        '400':
          $ref: '#/responses/BadRequest'
  '/analytics/shops/{shopID}/payments/stats/conversion':
    get:
      description: Get payments conversion info
      tags:
      - Analytics
      operationId: getPaymentConversionStats
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/shopID'
      - $ref: '#/parameters/fromTime'
      - $ref: '#/parameters/toTime'
      - $ref: '#/parameters/splitUnit'
      - $ref: '#/parameters/splitSize'
      responses:
        '200':
          description: List of payment conversion stats
          schema:
            type: array
            items:
                $ref:  '#/definitions/PaymentConversionStat'
        '404':
          $ref: '#/responses/NotFound'
        '400':
          $ref: '#/responses/BadRequest'
  '/analytics/shops/{shopID}/payments/stats/revenue':
    get:
      description: Get payments revenue info
      tags:
      - Analytics
      operationId: getPaymentRevenueStats
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/shopID'
      - $ref: '#/parameters/fromTime'
      - $ref: '#/parameters/toTime'
      - $ref: '#/parameters/splitUnit'
      - $ref: '#/parameters/splitSize'
      responses:
        '200':
          description: List of payment revenue stats
          schema:
            type: array
            items:
                $ref:  '#/definitions/PaymentRevenueStat'
        '404':
          $ref: '#/responses/NotFound'
        '400':
          $ref: '#/responses/BadRequest'
  '/analytics/shops/{shopID}/payments/stats/geo':
    get:
      description: Get payments geo info
      tags:
      - Analytics
      operationId: getPaymentGeoStats
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/shopID'
      - $ref: '#/parameters/fromTime'
      - $ref: '#/parameters/toTime'
      - $ref: '#/parameters/splitUnit'
      - $ref: '#/parameters/splitSize'
      responses:
        '200':
          description: List of payment geo stats
          schema:
            type: array
            items:
              $ref:  '#/definitions/PaymentGeoStat'
        '404':
          $ref: '#/responses/NotFound'
        '400':
          $ref: '#/responses/BadRequest'
  '/analytics/shops/{shopID}/customers/stats/rate':
    get:
      description: Get payments rate info
      tags:
      - Analytics
      operationId: getPaymentRateStats
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/shopID'
      - $ref: '#/parameters/fromTime'
      - $ref: '#/parameters/toTime'
      responses:
        '200':
          description: Payment rate stats
          schema:
            $ref:  '#/definitions/PaymentRateStat'
        '404':
          $ref: '#/responses/NotFound'
        '400':
          $ref: '#/responses/BadRequest'
  '/analytics/shops/{shopID}/customers/stats/payment_method':
    get:
      description: Payment method stats
      tags:
      - Analytics
      operationId: getPaymentMethodStats
      parameters:
      - $ref: '#/parameters/requestID'
      - $ref: '#/parameters/shopID'
      - $ref: '#/parameters/fromTime'
      - $ref: '#/parameters/toTime'
      - $ref: '#/parameters/splitUnit'
      - $ref: '#/parameters/splitSize'
      - name: paymentMethod
        in: query
        description: Payment method type
        type: string
        enum:
        - bankCard
      responses:
        '200':
          description: List of payment method stats
          schema:
            type: array
            items:
              $ref:  '#/definitions/PaymentMethodStat'
        '404':
          $ref: '#/responses/NotFound'
        '400':
          $ref: '#/responses/BadRequest'
definitions:
  Claim:
    type: object
    required:
    - id
    - status
    - changeset
    properties:
      id:
        type: string
      status:
        $ref: '#/definitions/ClaimStatus'
      changeset:
        $ref: '#/definitions/PartyChangeset'
  ClaimRegistrationResult:
    type: object
    required:
    - claimID
    properties:
      claimID:
        type: integer
        format: int64
  PartyChangeset:
    type: array
    items:
      $ref: '#/definitions/PartyModification'
  PartyModification:
    type: object
    discriminator: partyModificationType
    required:
    - partyModificationType
    properties:
      partyModificationType:
        type: string
  PartySuspension:
    type: object
    allOf:
    - $ref: '#/definitions/PartyModification'
    - type: object
      required:
      - details
      properties:
        details:
          $ref: '#/definitions/Suspension'
  ContractCreation:
    type: object
    allOf:
    - $ref: '#/definitions/PartyModification'
    - type: object
      required:
      - contract
      properties:
        contract:
          $ref: '#/definitions/Contract'
  ContractModification:
    type: object
    allOf:
    - $ref: '#/definitions/PartyModification'
    - type: object
      discriminator: contractModificationType
      required:
      - contractModificationType
      - contractID
      properties:
        contractModificationType:
          type: string
        contractID:
          type: integer
          format: int32
  ContractTermination:
    type: object
    allOf:
      - $ref: '#/definitions/ContractModification'
      - type: object
        required:
        - terminatedAt
        properties:
          terminatedAt:
            type: string
            format: date-time
          reason:
            type: string
  ContractPayoutToolCreation:
    type: object
    allOf:
      - $ref: '#/definitions/ContractModification'
      - type: object
        required:
        - payoutTool
        properties:
          payoutTool:
            $ref: '#/definitions/PayoutTool'
  ShopCreation:
    type: object
    allOf:
    - $ref: '#/definitions/PartyModification'
    - type: object
      required:
      - shop
      properties:
        shop:
          $ref: '#/definitions/Shop'
  ShopModification:
    type: object
    allOf:
    - $ref: '#/definitions/PartyModification'
    - type: object
      discriminator: shopModificationType
      required:
      - shopModificationType
      - shopID
      properties:
        shopID:
          type: integer
          format: int32
        shopModificationType:
          type: string
  ShopSuspension:
    type: object
    allOf:
    - $ref: '#/definitions/ShopModification'
    - type: object
      required:
      - details
      properties:
        details:
          $ref: '#/definitions/Suspension'
  ShopUpdate:
    type: object
    allOf:
    - $ref: '#/definitions/ShopModification'
    - type: object
      required:
      - details
      properties:
        details:
          $ref: '#/definitions/UpdateShopArgs'
  ShopAccountCreation:
    type: object
    allOf:
    - $ref: '#/definitions/ShopModification'
    - type: object
      required:
      - account
      properties:
        account:
          $ref: '#/definitions/ShopAccount'
  Suspension:
    type: object
    required:
    - suspensionType
    properties:
      suspensionType:
        type: string
        enum:
        - active
        - suspended
  ClaimStatus:
    type: object
    discriminator: status
    required:
    - status
    properties:
      status:
        type: string
  ClaimPending:
    type: object
    allOf:
    - $ref: '#/definitions/ClaimStatus'
  ClaimAccepted:
    type: object
    allOf:
    - $ref: '#/definitions/ClaimStatus'
    - type: object
      required:
      - acceptedAt
      properties:
        acceptedAt:
          type: string
          format: date-time
  ClaimDenied:
    type: object
    allOf:
    - $ref: '#/definitions/ClaimStatus'
    - type: object
      required:
      - reason
      properties:
        reason:
          type: string
  CreateShopArgs:
    type: object
    required:
    - categoryID
    - details
    - contractID
    - payoutToolID
    properties:
      categoryID:
        type: integer
        format: int32
      details:
        $ref: '#/definitions/ShopDetails'
      contractID:
        type: integer
        format: int32
      payoutToolID:
        type: integer
        format: int32
      callbackUrl:
        type: string
  ShopDetails:
    type: object
    required:
    - name
    properties:
      name:
        type: string
      description:
        type: string
      location:
        $ref: '#/definitions/ShopLocation'
  ShopLocation:
    type: object
    discriminator: locationType
    required:
    - locationType
    properties:
      locationType:
        type: string
  ShopLocationUrl:
    type: object
    allOf:
    - $ref: '#/definitions/ShopLocation'
    - type: object
      required:
      - url
      properties:
        url:
          type: string
  UpdateShopArgs:
    properties:
      categoryID:
        type: integer
        format: int32
      details:
        $ref: '#/definitions/ShopDetails'
      contractID:
        type: integer
        format: int32
      payoutToolID:
        type: integer
        format: int32
      callbackUrl:
        type: string
  Contractor:
    type: object
    required:
    - bankAccount
    - legalEntity
    properties:
      bankAccount:
        $ref: '#/definitions/BankAccount'
      legalEntity:
        $ref: '#/definitions/LegalEntity'
  BankAccount:
    type: object
    required:
    - account
    - bankName
    - bankPostAccount
    - bankBik
    properties:
      account:
        type: string
      bankName:
        type: string
      bankPostAccount:
        type: string
      bankBik:
        type: string
  LegalEntity:
    type: object
    discriminator: entityType
    required:
    - entityType
    properties:
      entityType:
        type: string
  RussianLegalEntity:
    type: object
    allOf:
    - $ref: '#/definitions/LegalEntity'
    - type: object
      required:
      - registeredName
      - registeredNumber
      - inn
      - actualAddress
      - postAddress
      - representativePosition
      - representativeFullName
      - representativeDocument
      properties:
        registeredName:
          type: string
        registeredNumber:
          type: string
        inn:
          type: string
        actualAddress:
          type: string
        postAddress:
          type: string
        representativePosition:
          type: string
        representativeFullName:
          type: string
        representativeDocument:
          type: string
  PayoutToolParams:
    type: object
    discriminator: payoutToolType
    required:
    - currency
    - payoutToolType
    properties:
      currency:
        type: string
      payoutToolType:
        type: string
  PayoutTool:
    type: object
    required:
    - id
    - params
    properties:
      id:
        type: integer
        format: int32
      params:
        $ref: '#/definitions/PayoutToolParams'
  PayoutToolBankAccount:
    type: object
    allOf:
    - $ref: '#/definitions/PayoutToolParams'
    - type: object
      required:
      - bankAccount
      properties:
        bankAccount:
          $ref: '#/definitions/BankAccount'
  Category:
    type: object
    required:
    - name
    - categoryID
    properties:
      name:
        type: string
      categoryID:
        type: integer
        format: int32
      description:
        type: string
  Party:
    type: object
    required:
    - id
    - isBlocked
    - isSuspended
    properties:
      id:
        type: string
      isBlocked:
        type: boolean
      isSuspended:
        type: boolean
  Shop:
    type: object
    required:
    - id
    - isBlocked
    - isSuspended
    - categoryID
    - details
    - contractID
    properties:
      id:
        type: integer
        format: int32
      isBlocked:
        type: boolean
      isSuspended:
        type: boolean
      categoryID:
        type: integer
        format: int32
      details:
        $ref: '#/definitions/ShopDetails'
      contractID:
        type: integer
        format: int32
      payoutToolID:
        type: integer
        format: int32
      account:
        $ref: '#/definitions/ShopAccount'
      callbackHandler:
        $ref: '#/definitions/CallbackHandler'
  ContractParams:
    type: object
    required:
    - contractor
    - payoutToolParams
    properties:
      contractor:
        $ref: '#/definitions/Contractor'
      payoutToolParams:
        $ref: '#/definitions/PayoutToolParams'
  Contract:
    type: object
    required:
    - id
    - status
    properties:
      id:
        type: integer
        format: int32
      contractor:
        $ref: '#/definitions/Contractor'
      validSince:
        type: string
        format: date-time
      validUntil:
        type: string
        format: date-time
      status:
        type: string
        enum:
        - active
        - terminated
      terminatedAt: #experimental simplification
        type: string
        format: date-time
  ShopAccount:
    type: object
    required:
    - guaranteeID
    - settlementID
    - currency
    properties:
      guaranteeID:
        type: string
      settlementID:
        type: string
      currency:
        type: string
  Account:
    type: object
    required:
    - id
    - ownAmount
    - availableAmount
    - currency
    properties:
      id:
        type: string
      ownAmount:
        type: integer
      availableAmount:
        type: integer
      currency:
        type: string
  PaymentConversionStat:
    type: object
    required:
    - offset
    - successfulCount
    - totalCount
    - conversion
    properties:
      offset:
        type: integer
      successfulCount:
        type: integer
      totalCount:
        type: integer
      conversion:
        type: number
  PaymentRateStat:
    type: object
    required:
    - uniqueCount
    properties:
      uniqueCount:
        type: integer
  PaymentGeoStat:
    type: object
    required:
    - offset
    - geoID
    - currency
    - profit
    - revenue
    properties:
      offset:
        type: integer
      geoID:
        type: integer
        format: int32
      currency:
        type: string
      profit:
        type: integer
      revenue:
        type: integer
  PaymentMethodStat:
    type: object
    discriminator: statType
    required:
    - statType
    properties:
      statType:
        type: string
  PaymentMethodBankCardStat:
    type: object
    allOf:
    - $ref: '#/definitions/PaymentMethodStat'
    - type: object
      required:
      - offset
      - totalCount
      - paymentSystem
      - profit
      - revenue
      properties:
        offset:
          type: integer
        totalCount:
          type: integer
        paymentSystem:
          type: string
        profit:
          type: integer
        revenue:
          type: integer
  PaymentRevenueStat:
    type: object
    required:
    - offset
    - currency
    - profit
    - revenue
    properties:
      offset:
        type: integer
      currency:
        type: string
      profit:
        type: integer
      revenue:
        type: integer
  CreatePaymentToolTokenArgs:
    type: object
    required:
    - paymentTool
    - clientInfo
    properties:
      paymentTool:
        $ref: '#/definitions/PaymentTool'
      clientInfo:
        $ref: '#/definitions/ClientInfo'
  PaymentTool:
    type: object
    discriminator: paymentToolType
    properties:
      paymentToolType:
        type: string
    required:
    - paymentToolType
  CardData:
    type: object
    allOf:
    - $ref: '#/definitions/PaymentTool'
    - type: object
      required:
      - cardNumber
      - expDate
      - cvv
      properties:
        cardHolder:
          type: string
        cardNumber:
          type: string
          pattern: ^\d{10,19}$
        expDate:
          type: string
          pattern: ^\d{2}\/\d{2}$
        cvv:
          type: string
          pattern: ^\d{3,4}$
  Invoice:
    type: object
    allOf:
    - $ref: '#/definitions/InvoiceStatus'
    - type: object
      required:
      - id
      - shopID
      - createdAt
      - dueDate
      - amount
      - currency
      - context
      - product
      properties:
        id:
          type: string
        shopID:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        dueDate:
          type: string
          format: date-time
        amount:
          type: integer
          format: int64
          minimum: 1
        currency:
          type: string
        context:
          $ref: '#/definitions/InvoiceContext'
        product:
          type: string
        description:
          type: string
  InvoiceStatus:
    type: object
    required:
    - status
    properties:
      status:
        type: string
        enum:
        - unpaid
        - cancelled
        - paid
        - refunded
        - fulfilled
      reason:
        type: string
  CreateInvoiceArgs:
    type: object
    required:
    - shopID
    - product
    - dueDate
    - amount
    - currency
    - context
    properties:
      shopID:
        type: integer
        format: int32
      amount:
        type: integer
        format: int64
        minimum: 1
      currency:
        type: string
      context:
        $ref: '#/definitions/InvoiceContext'
      dueDate:
        type:
          string
        format:
          date-time
      product:
        type: string
      description:
        type: string
  CreatePaymentArgs:
    type: object
    required:
    - paymentToolToken
    - paymentSession
    - contactInfo
    properties:
      paymentToolToken:
        type: string
      paymentSession:
        type: string
      contactInfo:
        $ref: '#/definitions/ContactInfo'
  Payment:
    type: object
    allOf:
    - $ref: '#/definitions/PaymentStatus'
    - type: object
      required:
      - id
      - invoiceID
      - createdAt
      - paymentToolToken
      - contactInfo
      - paymentSession
      properties:
        id:
          type: string
        invoiceID:
          type: string
        createdAt:
          type: string
          format: date-time
        paymentToolToken:
          type: string
        contactInfo:
          $ref: '#/definitions/ContactInfo'
        paymentSession:
          type: string
  PaymentStatus:
    type: object
    required:
    - status
    properties:
      status:
        type: string
        enum:
        - pending
        - processed
        - captured
        - cancelled
        - failed
      error:
        $ref: '#/definitions/LogicError'
  Event:
    type: object
    discriminator: eventType
    required:
    - id
    - createdAt
    - eventType
    properties:
      id:
        type: integer
      createdAt:
        type: string
        format: date-time
      eventType:
        type: string
  EventInvoiceStatusChanged:
    type: object
    allOf:
    - $ref: '#/definitions/Event'
    - $ref: '#/definitions/InvoiceStatus'
  EventPaymentStatusChanged:
    type: object
    allOf:
    - $ref: '#/definitions/Event'
    - $ref: '#/definitions/PaymentStatus'
    - type: object
      required:
      - paymentID
      properties:
        paymentID:
          type: string
  EventInvoiceCreated:
    type: object
    allOf:
    - $ref: '#/definitions/Event'
    - type: object
      required:
      - invoice
      properties:
        invoice:
          $ref: '#/definitions/Invoice'
  EventPaymentStarted:
    type: object
    allOf:
    - $ref: '#/definitions/Event'
    - type: object
      required:
      - payment
      properties:
        payment:
          $ref: '#/definitions/Payment'
  EventPaymentBound:
    type: object
    allOf:
    - $ref: '#/definitions/Event'
    - type: object
      required:
      - paymentID
      properties:
        paymentID:
          type: string
  EventInvoicePaymentInteractionRequested:
    type: object
    allOf:
    - $ref: '#/definitions/Event'
    - type: object
      required:
      - paymentID
      - userInteraction
      properties:
        paymentID:
          type: string
        userInteraction:
          $ref: '#/definitions/UserInteraction'
  UserInteraction:
    type: object
    discriminator: interactionType
    required:
    - interactionType
    properties:
      interactionType:
        type: string
  Redirect:
    type: object
    allOf:
    - $ref: '#/definitions/UserInteraction'
    - type: object
      required:
      - request
      properties:
        request:
          $ref: '#/definitions/BrowserRequest'
  BrowserRequest:
    type: object
    discriminator: requestType
    required:
    - requestType
    properties:
      requestType:
        type: string
  BrowserGetRequest:
    type: object
    allOf:
    - $ref: '#/definitions/BrowserRequest'
    - type: object
      required:
      - uriTemplate
      properties:
        uriTemplate:
          type: string
  BrowserPostRequest:
    type: object
    allOf:
    - $ref: '#/definitions/BrowserRequest'
    - type: object
      required:
      - uriTemplate
      - form
      properties:
        uriTemplate:
          type: string
        form:
          $ref: "#/definitions/UserInteractionForm"
  UserInteractionForm:
    type: array
    items:
      type: object
      required:
      - key
      - template
      properties:
        key:
          type: string
        template:
          type: string
  CallbackHandler:
    type: object
    required:
    - url
    - publicKey
    properties:
      url:
        type: string
      publicKey:
        type: string
  LocationName:
    type: object
    required:
    - geoID
    - name
    properties:
      geoID:
        type: integer
        format: int32
      name:
        type: string
  Reason:
    type: object
    required:
    - reason
    properties:
      reason:
        type: string
  GeneralError:
    type: object
    required:
    - message
    properties:
      message:
        type: string
  LogicError:
    type: object
    required:
    - code
    - message
    properties:
      code:
        type: string
      message:
        type: string
  InvoiceContext:
    type: object
  ContactInfo:
    type: object
    properties:
      phoneNumber:
        type: string
      email:
        type: string
  ClientInfo:
    type: object
    required:
    - fingerprint
    properties:
      fingerprint:
        type: string
